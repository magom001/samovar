import { HttpService } from '@nestjs/axios';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Readable } from 'node:stream';
import { Configuration } from 'src/config/configuration';
import { ImageUploadService, UploadResult } from './image-upload.service';

@Injectable()
export class ImgurService extends ImageUploadService {
  constructor(
    private readonly httpService: HttpService,
    private readonly configuration: ConfigService<Configuration>,
  ) {
    super();
  }

  async deleteImage(deleteUrl: string): Promise<void> {
    await this.httpService.axiosRef.delete(deleteUrl, {
      headers: {
        Authorization: `Client-ID ${this.configuration.get('imgurClientId')}`,
      },
    });
  }

  /**
   * Uses Imgur API to upload image.
   *
   * @see https://apidocs.imgur.com/#de179b6a-3eda-4406-a8d7-1fb06c17cb9c
   * @param stream Readable stream.
   * @returns upload result.
   */
  async uploadImage(stream: Readable): Promise<UploadResult> {
    const formData = new FormData();

    // @ts-expect-error -- https://stackoverflow.com/questions/75793118/streaming-multipart-form-data-request-with-native-fetch-in-node-js/75795888#75795888
    formData.set('image', {
      [Symbol.toStringTag]: 'File',
      stream: () => stream,
    });

    const { data } = await this.httpService.axiosRef.post<Response>('https://api.imgur.com/3/image', formData, {
      headers: {
        Authorization: `Client-ID ${this.configuration.get('imgurClientId')}`,
      },
    });

    const deleteUrl = `https://api.imgur.com/3/image/${data.data.deletehash}`;
    const imageUrl = data.data.link;

    return { deleteUrl, imageUrl };
  }
}

/**
 * Autogenerated from a sample Imgur response.
 */
interface Response {
  data: Data;
  success: boolean;
  status: number;
}

/**
 * Autogenerated from a sample Imgur response.
 */
interface Data {
  id: string;
  title: any;
  description: any;
  datetime: number;
  type: string;
  animated: boolean;
  width: number;
  height: number;
  size: number;
  views: number;
  bandwidth: number;
  vote: any;
  favorite: boolean;
  nsfw: any;
  section: any;
  account_url: any;
  account_id: number;
  is_ad: boolean;
  in_most_viral: boolean;
  has_sound: boolean;
  tags: any[];
  ad_type: number;
  ad_url: string;
  edited: string;
  in_gallery: boolean;
  deletehash: string;
  name: string;
  link: string;
}
